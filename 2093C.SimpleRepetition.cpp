/*Pasha loves prime numbers∗
! Once again, in his attempts to find a new way to generate prime numbers, he became interested in an algorithm he found on the internet:

To obtain a new number y
, repeat k
 times the decimal representation of the number x
 (without leading zeros).
For example, for x=52
 and k=3
, we get y=525252
, and for x=6
 and k=7
, we get y=6666666
.

Pasha really wants the resulting number y
 to be prime, but he doesn't yet know how to check the primality of numbers generated by this algorithm. Help Pasha and tell him whether y
 is prime!

∗
An integer x
 is considered prime if it has exactly 2
 distinct divisors: 1
 and x
. For example, 13
 is prime because it has only 2
 divisors: 1
 and 13
. Note that the number 1
 is not prime, as it has only one divisor.

Input
Each test consists of several sets of input data. The first line contains a single integer t
 (1≤t≤100
) — the number of sets of input data. The following lines describe the sets of input data.

The first and only line of each data set contains two integers: x
 and k
 (1≤x≤109
, 1≤k≤7
).

Output
For each set of input data, output «YES» (without quotes) if the resulting number y
 will be prime, and «NO» otherwise.

You may output «Yes» and «No» in any case (for example, the strings «yES», «yes», and «Yes» will be recognized as positive answers).*/


#include <iostream>
#include <vector>
using namespace std;

long long pow_mod(long long a, long long b, long long mod) {
    long long result = 1;
    a %= mod;
    while (b > 0) {
        if (b % 2 == 1) {
            result = (result * a) % mod;
        }
        a = (a * a) % mod;
        b /= 2;
    }
    return result;
}

bool is_prime(int n) {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 == 0) return false;
    
    int d = n - 1;
    int s = 0;
    while (d % 2 == 0) {
        d /= 2;
        s++;
    }
    
    vector<int> witnesses = {2, 3, 5, 7, 11, 13, 17};
    for (int a : witnesses) {
        if (a >= n) continue;
        long long x = pow_mod(a, d, n);
        if (x == 1 || x == n - 1) continue;
        bool composite = true;
        for (int j = 0; j < s - 1; j++) {
            x = (x * x) % n;
            if (x == n - 1) {
                composite = false;
                break;
            }
        }
        if (composite) {
            return false;
        }
    }
    return true;
}

int main() {
    int t;
    cin >> t;
    
    while (t--) {
        int x, k;
        cin >> x >> k;
        
        if (k == 1) {
            cout << (is_prime(x) ? "YES" : "NO") << endl;
        } else {
            if (x == 1) {
                cout << (k == 2 ? "YES" : "NO") << endl;
            } else {
                cout << "NO" << endl;
            }
        }
    }
    
    return 0;
}